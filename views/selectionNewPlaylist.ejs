<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="icon" type="image/png" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png">
  <link rel="stylesheet" href="/css/groupScreen.css" />
  <style>
    .goback {
      padding: 12px 20px;
      border: 1px solid #0D6EFD;
      font-weight: 700;
      color: #0D6EFD;
      background: transparent;
    }
    .goback:hover{
      background: #0D6EFD;
      color: white;
    }
    .header {
      display: flex;
      justify-content: flex-end;
    }
    button5 {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background-color:transparent;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 1.5rem;
      align-items: center;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
  <div class="group">
    <div class="header">
      <div class="group-screen-btn">
        <button class="goback" onclick="goback()">Go Back</button>
        <button onclick="publishPlaylist()">Publish</button>
      </div>
    </div>
    <div class="heading">
      <h3>Select Screens to Publish Playlist</h3>
    </div>
    <div class="selection-screens">
      <div class="select-screen">
        <input type="search" id="searchInput" placeholder="Search">
        <table>
          <thead>
            <tr>
              <th></th>
              <th>Screen ID</th>
              <th>Screen Name</th>
              <th>Playlist</th>
              <th>Address</th>
            </tr>
          </thead>
          <tbody id="screensTableBody">
            <% if (screens && screens.length) { %>
              <% screens.forEach(screen => { %>
                <tr class="screen-row">
                  <td> <input type="checkbox" 
                    name="checkbox" 
                    value="<%= screen.screenid %>" 
                    data-screenname="<%= screen.screenname %>" 
                    data-address="<%= screen.location %>" 
                    data-playlistname="<%= screen.playlistname %>"</td>
                  <td><%= screen.screenid %></td>
                  <td><%= screen.screenname %></td>

                  <td ><%= screen.playlistname %></td>
                  <td><%= screen.location %></td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="6">No screens found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
        <div id="noResultsMessage" style="display: none; text-align: center;">No screens found.</div>
      </div>

      <div class="selected-screen">
        <table>
          <thead>
            <tr>
              <th>Sr No</th>
              <th>Screen ID</th>
              <th>Screen Name</th>
              <th>Address</th>
            </tr>
          </thead>
          <tbody id="selectedScreensTable">
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    function goback() {
      window.history.back();
    }

    const playlistName = sessionStorage.getItem("playlistName");
    const playlistDescription = sessionStorage.getItem("playlistDescription");
    const playlistUrls = sessionStorage.getItem("selectedItems");
    const urls = JSON.parse(playlistUrls);

    async function publishPlaylist() {
      const selectedScreens = [];
      const checkboxes = document.querySelectorAll('input[name="checkbox"]:checked');
      checkboxes.forEach((checkbox) => {
        selectedScreens.push(checkbox.value);
      });

      if (selectedScreens.length === 0) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Please select at least one screen',
        });
        return;
      }

      try {
        const response = await fetch("/Dashboard/asdfghjklqwertyuiopzxcvbnmasdfghjklqwertyuiopzxcvbnmasdfghjklqwertyuiopzxcvbnmasdfghjklqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmasdfghjklqwertyuiopzxcvbn/createPlaylist", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            screenIDs: selectedScreens,
            urls: urls,
            playlistName: playlistName,
            playlistDescription: playlistDescription,
          }),
        });
        if (!response.ok) {
          throw new Error("Failed to create playlist");
        }
        const responseData = await response.json();
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: 'Playlist created successfully!',
        }).then(() => {
          window.location.href = '/Dashboard/Playlist';
        });
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Failed to create playlist. Please try again.',
        });
        console.error("Error creating playlist:", error);
      }
    }

    window.publishPlaylist = publishPlaylist;

    document.addEventListener('DOMContentLoaded', () => {
      const checkboxes = document.querySelectorAll('input[name="checkbox"]');
      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', handleCheckboxChange);
      });

      const searchInput = document.getElementById('searchInput');
      searchInput.addEventListener('input', filterScreens);
    });

    // function handleCheckboxChange(event) {
    //   const checkbox = event.target;
    //   const selectedScreensTable = document.getElementById('selectedScreensTable');
    //   if (checkbox.checked) {
    //     const newRow = selectedScreensTable.insertRow();
    //     newRow.setAttribute('data-screenid', checkbox.value);
    //     newRow.innerHTML = `
    //       <td>${selectedScreensTable.rows.length + 1}</td>
    //       <td>${checkbox.value}</td>
    //       <td>${checkbox.getAttribute('data-screenname')}</td>
    //       <td>${checkbox.getAttribute('data-address')}</td>
    //     `;
    //   } else {
    //     const rows = selectedScreensTable.rows;
    //     for (let i = 0; i < rows.length; i++) {
    //       if (rows[i].getAttribute('data-screenid') === checkbox.value) {
    //         selectedScreensTable.deleteRow(i);
    //         break;
    //       }
    //     }
    //     // Update serial numbers
    //     for (let i = 0; i < rows.length; i++) {
    //       rows[i].cells[0].innerText = i + 1;
    //     }
    //   }
    // }
  


































//     function handleCheckboxChange(event) {
//   const checkbox = event.target;
//   const screenID = checkbox.value;
//   const playlistName = checkbox.getAttribute('data-playlistname'); // Add this attribute to know if playlist is assigned
//   const selectedScreensTable = document.getElementById('selectedScreensTable');

//   if (playlistName) {
//     // If the screen already has a playlist, prompt to unassign it first
//     window.deletePlaylist(screenID).then(() => {
//       // After the playlist is deleted, process the checkbox click
//       toggleScreenSelection(checkbox, selectedScreensTable);
//     });
//   } else {
//     // Directly process the checkbox click
//     toggleScreenSelection(checkbox, selectedScreensTable);
//   }
// }

// function toggleScreenSelection(checkbox, selectedScreensTable) {
//   if (checkbox.checked) {
//     const newRow = selectedScreensTable.insertRow();
//     newRow.setAttribute('data-screenid', checkbox.value);
//     newRow.innerHTML = `
//       <td>${selectedScreensTable.rows.length + 0}</td>
//       <td>${checkbox.value}</td>
//       <td>${checkbox.getAttribute('data-screenname')}</td>
//       <td>${checkbox.getAttribute('data-address')}</td>
//     `;
//   } else {
//     const rows = selectedScreensTable.rows;
//     for (let i = 0; i < rows.length; i++) {
//       if (rows[i].getAttribute('data-screenid') === checkbox.value) {
//         selectedScreensTable.deleteRow(i);
//         break;
//       }
//     }
//     // Update serial numbers
//     for (let i = 0; i < rows.length; i++) {
//       rows[i].cells[0].innerText = i + 1;
//     }
//   }
// }


function handleCheckboxChange(event) {
  const checkbox = event.target;
  const screenID = checkbox.value;
  const playlistName = checkbox.getAttribute('data-playlistname'); // Check if a playlist is assigned
  const selectedScreensTable = document.getElementById('selectedScreensTable');

  if (playlistName) {
    // If the screen already has a playlist, ask to unassign it
    window.deletePlaylist(screenID).then((result) => {
      if (result) {
        // If the user confirms deletion, process the checkbox
        toggleScreenSelection(checkbox, selectedScreensTable);
      } else {
        // If the user cancels, uncheck the checkbox
        checkbox.checked = false;
      }
    });
  } else {
    // If no playlist is assigned, proceed normally
    toggleScreenSelection(checkbox, selectedScreensTable);
  }
}

function toggleScreenSelection(checkbox, selectedScreensTable) {
  if (checkbox.checked) {
    const newRow = selectedScreensTable.insertRow();
    newRow.setAttribute('data-screenid', checkbox.value);
    newRow.innerHTML = `
      <td>${selectedScreensTable.rows.length + 1}</td>
      <td>${checkbox.value}</td>
      <td>${checkbox.getAttribute('data-screenname')}</td>
      <td>${checkbox.getAttribute('data-address')}</td>
    `;
  } else {
    const rows = selectedScreensTable.rows;
    for (let i = 0; i < rows.length; i++) {
      if (rows[i].getAttribute('data-screenid') === checkbox.value) {
        selectedScreensTable.deleteRow(i);
        break;
      }
    }
    // Update serial numbers
    for (let i = 0; i < rows.length; i++) {
      rows[i].cells[0].innerText = i + 1;
    }
  }
}
































// window.deletePlaylist = function deletePlaylist(screenID) {
//           // Show confirmation dialog using SweetAlert
//           Swal.fire({
//             title: 'Are you sure?',
//             text: 'You want to unassign this screen',
//             icon: 'warning',
//             showCancelButton: true,
//             confirmButtonText: 'Yes, delete it!',
//             cancelButtonText: 'No, cancel',
//             reverseButtons: true
//           }).then((result) => {
//             if (result.isConfirmed) {
//               // User confirmed deletion, proceed with fetch request
//               fetch(`/Dashboard/Screens/${screenID}/deletePlaylist`, {
//                 method: 'PUT',
//                 headers: {
//                   'Content-Type': 'application/json'
//                 },
//                 body: JSON.stringify({
//                   playlistname: null
//                 })
//               })
//                 .then(response => {
                  
//                   // Remove the screen from selectedScreens
//                   selectedScreens = selectedScreens.filter(id => id !== screenID);
//                   console.log("selectedScreens after screen playlist data fetch requestr",selectedScreens);
//                   // Update the UI
//                   removeSelectedScreenRow(screenID);
//                   const checkbox = document.querySelector(`input[value="${screenID}"]`);
//                   if (checkbox) {
//                     checkbox.checked = false;
//                   }
//                   console.log(' after delete in screen table')
//                   console.log("playlistId", playlistId);
//                    console.log("playlistName", playlistName);
//                       console.log("playlistDescription", playlistDescription);
//                   console.log("selectedUrls", urls);
//                   console.log("selectedScreens", selectedScreens);
//                   // Update the database
//                   fetch("/Dashboard/Playlist/editPlaylist", {
//                     method: "POST",
//                     headers: {
//                       "Content-Type": "application/json",
//                     },
//                     body: JSON.stringify({
//                       playlistId: sessionStorage.getItem("playlistId"),
//                       screenIDs: selectedScreens,
//                       urls: JSON.parse(sessionStorage.getItem("playlistUrls")),
//                       playlistName: sessionStorage.getItem("playlistName"),
//                       playlistDescription: sessionStorage.getItem("playlistDescription"),
//                     }),
//                   });
//                 })
//                 .then(response => {
//                   if (!response.ok) {
//                     throw new Error('Failed to edit playlist');
//                   }
//                   return response.json();
//                 })
//                 .then(responseData => {
//                   console.log("Playlist edit:", responseData.playlist);
//                   Swal.fire(
//                     'Deleted!',
//                     'Playlist deleted successfully.',
//                     'success'
//                   );
//                    // Reload the page after deletion and confirmation
//           window.location.reload();
//                 })
//                 .catch(error => {
//                   console.error('Error deleting playlist:', error);
//                   Swal.fire(
//                     'Deleted!',
//                     'Playlist deleted successfully.',
//                     'success'
//                   );
//                    // Reload the page after deletion and confirmation
//           window.location.reload();
//                 });
//             }
//           });
//         };


window.deletePlaylist = function deletePlaylist(screenID) {
  // Show confirmation dialog using SweetAlert
  Swal.fire({
    title: 'Are you sure?',
    text: 'You want to unassign this screen',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'No, cancel',
    reverseButtons: true
  }).then((result) => {
    if (result.isConfirmed) {
      // User confirmed deletion, proceed with fetch request
      fetch(`/Dashboard/vbnzqmcdylkpjfghwoaerxstuiqvcnbksrzjmdwqlpoyzthxfguvwekcqjstlirmbhdyanpxfogwsqzvrjleuctymkbofnwpaxhdzcrvlmjsqytkgcewphrojnuzbdmvlfyctakzsxornpewhqlvdgjmuibzrktxjdcvfsonmhlwprqzytgivaxbceusokmrdjfyhapwzqvnmxlgtojyeucbkrsfihadwpomnlxutzyjgwrhsvfkpqebxdmc/${screenID}/deletePlaylist`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          playlistname: null
        })
      })
      .then(response => {
        // Remove the screen from selectedScreens
        selectedScreens = selectedScreens.filter(id => id !== screenID);
        console.log("selectedScreens after screen playlist data fetch requestr", selectedScreens);
        // Update the UI
        removeSelectedScreenRow(screenID);
        const checkbox = document.querySelector(`input[value="${screenID}"]`);
        if (checkbox) {
          checkbox.checked = false;
        }
        console.log(' after delete in screen table');
        console.log("playlistId", playlistId);
        console.log("playlistName", playlistName);
        console.log("playlistDescription", playlistDescription);
        console.log("selectedUrls", urls);
        console.log("selectedScreens", selectedScreens);
        
        // Update the database
        return fetch("/Dashboard/Playlist/editPlaylist", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            playlistId: sessionStorage.getItem("playlistId"),
            screenIDs: selectedScreens,
            urls: JSON.parse(sessionStorage.getItem("playlistUrls")),
            playlistName: sessionStorage.getItem("playlistName"),
            playlistDescription: sessionStorage.getItem("playlistDescription"),
          }),
        });
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to edit playlist');
        }
        return response.json();
      })
      .then(responseData => {
        console.log("Playlist edit:", responseData.playlist);
        Swal.fire(
          'Deleted!',
          'Playlist deleted successfully.',
          'success'
        );
        // Reload the page after deletion and confirmation
        window.location.reload();
      })
      .catch(error => {
        console.error('Error deleting playlist:', error);
        Swal.fire(
         'Deleted!',
          'Playlist deleted successfully.',
          'success'
        );
        // Reload the page after error
        window.location.reload();
      });
    } else if (result.dismiss === Swal.DismissReason.cancel) {
      // User canceled deletion, reload the page
      window.location.reload();
    }
  });
};




















    function filterScreens() {
      const filter = document.getElementById('searchInput').value.toLowerCase();
      const rows = document.querySelectorAll('.screen-row');
      let visibleRows = 0;

      rows.forEach(row => {
        const screenName = row.querySelector('.screen-screenname').textContent.toLowerCase();
        if (screenName.includes(filter)) {
          row.style.display = '';
          visibleRows++;
        } else {
          row.style.display = 'none';
        }
      });

      const noResultsMessage = document.getElementById('noResultsMessage');
      noResultsMessage.style.display = visibleRows === 0 ? '' : 'none';
    }
  </script>
</body>

</html>
