<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
  <link rel="stylesheet" href="/css/groupScreen.css" />
  <link rel="icon" type="image/png" href="https://res.cloudinary.com/dqfnwh89v/image/upload/v1724408615/qxvvfcf7ftgklhl2k03v.png">

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert2 Library -->
  <script>
    const screenIDS = sessionStorage.getItem('screenIDS');
    console.log("screenIDS", screenIDS);
  </script>
  <style>
    .goback {
      padding: 12px 20px;
      border: 1px solid #0D6EFD;
      font-weight: 700;
      color: #0D6EFD;
      background: transparent;
    }

    .goback:hover {
      background: #0D6EFD;
      color: white;
    }

    .header {
      display: flex;
      justify-content: flex-end;
    }

    button5 {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background-color: transparent;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 1.5rem;
      align-items: center;
    }
  </style>
</head>

<body>
  <div class="group">
    <div class="header">
      <div class="group-screen-btn">
        <button class="goback" onclick="goback()">Go Back</button>
        <button onclick="publishPlaylist()">Publish</button>
      </div>
    </div>
    <div class="heading">
      <h3>Select Screens to Publish Playlist</h3>
    </div>
    <div class="selection-screens">
      <div class="select-screen">
        <input type="search" id="searchInput" placeholder="Search">
        <table>
          <thead>
            <tr>
              <th></th>
              <th>Screen ID</th>
              <th>SCREEN NAME</th>
              <th>Playlist</th>
              <th>Address</th>
            </tr>
          </thead>
          <tbody>
            <% if (screens && screens.length) { %>
              <% screens.forEach(screen => { %>
                <tr class="screen-row">
                  <td>
                    <input type="checkbox" name="checkbox" value="<%= screen.screenid %>" data-screenname="<%= screen.screenname %>" data-address="<%= screen.location %>" onchange="handleCheckboxChange(event)" />
                  </td>
                  <td><%= screen.screenid %></td>
                  <td class="screen-screenname"><%= screen.screenname %></td>
                  <td><%= screen.playlistname %></td>

                  <td><%= screen.location %></td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="6">No screens found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
        <div id="noResultsMessage" style="display: none; text-align: center;">No screens found.</div>
      </div>
      <div class="selected-screen">
        <table id="selectedScreensTable">
          <thead>
            <tr>
              <th>Sr No</th>
              <th>Screen ID</th>
              <th>Screen Name</th>
              <th>Address</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <!-- Selected screens will be dynamically added here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <script>
    function goback() {
      window.history.back();
    }

    document.addEventListener("DOMContentLoaded", () => {
      const playlistId = sessionStorage.getItem("playlistId");
      const playlistName = sessionStorage.getItem("playlistName");
      const rawScreenIDs = sessionStorage.getItem("screenIDS");
      const screenIDs = rawScreenIDs ? rawScreenIDs.replace(/[{}]/g, "").split(",").map(id => id.trim().replace(/"/g, "")) : [];
      const playlistDescription = sessionStorage.getItem("playlistDescription");
      const playlistUrls = sessionStorage.getItem("playlistUrls");
      const urls = JSON.parse(playlistUrls);
      let selectedScreens = [...screenIDs];

      function initializeCheckboxes() {
        const checkboxes = document.querySelectorAll('input[name="checkbox"]');
        checkboxes.forEach((checkbox) => {
          if (selectedScreens.includes(checkbox.value)) {
            checkbox.checked = true;
            addSelectedScreenRow(checkbox);
          }
        });
      }

      initializeCheckboxes();

      async function publishPlaylist() {
        const checkboxes = document.querySelectorAll('input[name="checkbox"]:checked');
        checkboxes.forEach((checkbox) => {
          if (!selectedScreens.includes(checkbox.value)) {
            selectedScreens.push(checkbox.value);
          }
        });

        if (selectedScreens.length === 0) {
          Swal.fire({
            icon: 'warning',
            title: 'No Screens Selected',
            text: 'Please select at least one screen',
          });
          return;
        }

        console.log("playlistId", playlistId);
        console.log("playlistName", playlistName);
        console.log("playlistDescription", playlistDescription);
        console.log("selectedUrls", urls);
        console.log("selectedScreens", selectedScreens);

        try {
          const response = await fetch("/Dashboard/Playlist/editPlaylist", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              playlistId: playlistId,
              screenIDs: selectedScreens,
              urls: urls,
              playlistName: playlistName,
              playlistDescription: playlistDescription,
            }),
          });
          if (!response.ok) {
            throw new Error("Failed to edit playlist");
          }
          const responseData = await response.json();
          console.log("Playlist edit:", responseData.playlist);
          Swal.fire({
            icon: 'success',
            title: 'Playlist Edited',
            text: 'Playlist edited successfully!',
          }).then(() => {
            window.location.href = '/Dashboard/Playlist';
          });
        } catch (error) {
          console.error("Error editing playlist:", error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to edit playlist. Please try again.',
          });
        }
      }

      window.publishPlaylist = publishPlaylist;

      // window.handleCheckboxChange = function handleCheckboxChange(event) {
      //   const checkbox = event.target;
      //   if (checkbox.checked) {
      //     addSelectedScreenRow(checkbox);
      //   } else {
      //     removeSelectedScreenRow(checkbox.value);
      //   }
      // };





















      window.handleCheckboxChange = function handleCheckboxChange(event) {
    const checkbox = event.target;
    const playlistName = checkbox.closest('tr').querySelector('td:nth-child(4)').textContent.trim(); // Playlist column

    if (checkbox.checked) {
        if (playlistName) {
            // If a playlist already exists, confirm if the user wants to unassign it
            Swal.fire({
                title: 'Screen already has a playlist',
                text: 'Do you want to unassign the current playlist before assigning a new one?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, unassign it',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Call deletePlaylist to remove the current playlist
                    deletePlaylist(checkbox.value);
                    
                } else {
                    checkbox.checked = false; // Revert checkbox selection
                    
                }
                
            });
        } else {
            // No existing playlist, proceed with adding the screen
            addSelectedScreenRow(checkbox);
            
        }
    } else {
        // Checkbox unchecked, remove the screen row
        removeSelectedScreenRow(checkbox.value);
    }
};


















      function addSelectedScreenRow(checkbox) {
        const selectedScreensTable = document.getElementById('selectedScreensTable').getElementsByTagName('tbody')[0];
        const existingRow = selectedScreensTable.querySelector(`tr[data-screenid="${checkbox.value}"]`);
        if (existingRow) {
          return; // Prevent adding duplicate rows
        }
        const newRow = selectedScreensTable.insertRow();
        newRow.setAttribute('data-screenid', checkbox.value);
        newRow.innerHTML = `
          <td>${selectedScreensTable.rows.length}</td>
          <td>${checkbox.value}</td>
          <td>${checkbox.getAttribute('data-screenname')}</td>
          <td>${checkbox.getAttribute('data-address')}</td>
          <td>
            <button5 onclick="deletePlaylist('${checkbox.value}')">
              <svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="15" cy="15" r="15" fill="#DC3545"/>
                <path d="M8.25 10.5H9.75H21.75" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12 10.5V9C12 8.60218 12.158 8.22064 12.4393 7.93934C12.7206 7.65804 13.1022 7.5 13.5 7.5H16.5C16.8978 7.5 17.2794 7.65804 17.5607 7.93934C17.842 8.22064 18 8.60218 18 9V10.5M20.25 10.5V21C20.25 21.3978 20.092 21.7794 19.8107 22.0607C19.5294 22.342 19.1478 22.5 18.75 22.5H11.25C10.8522 22.5 10.4706 22.342 10.1893 22.0607C9.90804 21.7794 9.75 21.3978 9.75 21V10.5H20.25Z" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12.75 13.5V18.75" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M17.25 13.5V18.75" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button5>
          </td>
        `;
      }

      function removeSelectedScreenRow(screenId) {
        const selectedScreensTable = document.getElementById('selectedScreensTable').getElementsByTagName('tbody')[0];
        const rowToDelete = selectedScreensTable.querySelector(`tr[data-screenid="${screenId}"]`);
        if (rowToDelete) {
          selectedScreensTable.deleteRow(rowToDelete.rowIndex - 1);
        }
      }

      document.getElementById('searchInput').addEventListener('input', filterScreens);

      function filterScreens() {
        const searchValue = document.getElementById('searchInput').value.toLowerCase();
        const rows = document.querySelectorAll('.screen-row');
        let visibleRowCount = 0;

        rows.forEach(row => {
          const screenName = row.querySelector('.screen-screenname').textContent.toLowerCase();
          if (screenName.includes(searchValue)) {
            row.style.display = '';
            visibleRowCount++;
          } else {
            row.style.display = 'none';
          }
        });

        const noResultsMessage = document.getElementById('noResultsMessage');
        noResultsMessage.style.display = visibleRowCount === 0 ? 'block' : 'none';
      }














      window.deletePlaylist = function deletePlaylist(screenID) {
          // Show confirmation dialog using SweetAlert
          Swal.fire({
            title: 'Are you sure?',
            text: 'You want to unassign this screen',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel',
            reverseButtons: true
          }).then((result) => {
            if (result.isConfirmed) {
              // User confirmed deletion, proceed with fetch request
              fetch(`/Dashboard/Screens/${screenID}/deletePlaylist`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  playlistname: null
                })
              })
                .then(response => {
                  
                  // Remove the screen from selectedScreens
                  selectedScreens = selectedScreens.filter(id => id !== screenID);
                  console.log("selectedScreens after screen playlist data fetch requestr",selectedScreens);
                  // Update the UI
                  removeSelectedScreenRow(screenID);
                  const checkbox = document.querySelector(`input[value="${screenID}"]`);
                  if (checkbox) {
                    checkbox.checked = false;
                  }
                  console.log(' after delete in screen table')
                  console.log("playlistId", playlistId);
                   console.log("playlistName", playlistName);
                      console.log("playlistDescription", playlistDescription);
                  console.log("selectedUrls", urls);
                  console.log("selectedScreens", selectedScreens);
                  // Update the database
                  fetch("/Dashboard/Playlist/editPlaylist", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      playlistId: sessionStorage.getItem("playlistId"),
                      screenIDs: selectedScreens,
                      urls: JSON.parse(sessionStorage.getItem("playlistUrls")),
                      playlistName: sessionStorage.getItem("playlistName"),
                      playlistDescription: sessionStorage.getItem("playlistDescription"),
                    }),
                  });
                })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Failed to edit playlist');
                  }
                  return response.json();
                })
                .then(responseData => {
                  console.log("Playlist edit:", responseData.playlist);
                  Swal.fire(
                    'Deleted!',
                    'Playlist deleted successfully.',
                    'success'
                  );
                   // Reload the page after deletion and confirmation
          window.location.reload();
                })
                .catch(error => {
                  console.error('Error deleting playlist:', error);
                  Swal.fire(
                    'Deleted!',
                    'Playlist deleted successfully.',
                    'success'
                  );
                   // Reload the page after deletion and confirmation
          window.location.reload();
                });
            }
            
            // else if (result.dismiss === Swal.DismissReason.cancel) {
            //   // User canceled deletion, do nothing or show a cancellation message
            //   Swal.fire(
            //     'Cancelled',
            //     'Your playlist is safe :)',
            //     'info'
            //   );
            // }
          });
        };










    });
  </script>
</body>

</html>
